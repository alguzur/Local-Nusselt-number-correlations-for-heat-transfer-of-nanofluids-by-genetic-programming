%%%% Deriving local Nusselt number correlations for heat transfer of nanofluids by genetic programming 
%%%% Authors: Alexander Guzman-Urbina, Kazuki Fukushima, Tomoya Tsukada, Hajime Ohno, and Yasuhiro Fukushima
%%%%%%%%%Department of Chemical Engineering, Graduate School of Engineering, Tohoku University, 6-6-07 Aramaki-Aza Aoba, Sendai, Japan
%%%%%%%%%Department of Frontier Science for Advanced Environment, Graduate School of Environmental Studies, Tohoku University, 6-6-07 Aramaki-Aza Aoba, Sendai, Japan
"""
必要なパッケージ
"""

# 標準
import operator
import random
import csv
import re
import datetime
import time

# 追加
import numpy as np
from deap import algorithms, base, creator, gp, tools
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import sympy
from PySimpleGUI import Text, InputText, FileBrowse, Submit, Cancel, Window, \
    FolderBrowse, Checkbox, Listbox
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

"""
GPのノードで使う関数
"""


def protected_div(left, right):
    try:
        y = np.divide(left, right)
        if np.isnan(y):
            y = 10 ** 8
        elif abs(y) > 10 ** 8:
            if y < 0:
                y = - 10 ** 8
            else:
                y = 10 ** 8
    except ZeroDivisionError:
        if left < 0:
            y = - 10 ** 8
        else:
            y = 10 ** 8
    return y


def protected_pow(left, right):
    # overflowを防ぐため
    if abs(left) < 1 and right >= 10 ** 8:
        return 0
    elif abs(left) > 1 and right >= 10 ** 8:
        return 10 ** 8
    right = float(right)
    a = np.power(left, right)
    # 複素数を含む場合を排除するため
    if type(a) is complex:
        return 10 ** 8
    elif np.isinf(a) or np.isnan(a):
        return 10 ** 8
    else:
        return a


def protected_mul(left, right):
    y = np.multiply(left, right)
    if abs(y) > 10 ** 8:
        if y < 0:
            y = - 10 ** 8
        else:
            y = 10 ** 8
    return y


def protected_sub(left, right):
    y = np.subtract(left, right)
    if abs(y) > 10 ** 8:
        if y < 0:
            y = -10 ** 8
        else:
            y = 10 ** 8
    elif np.isnan(y):
        y = 10 ** 8
    return y


def protected_ln(x):
    if not x:
        y = -10 ** 8
    else:
        y = np.log(abs(x))
        if abs(y) > 10 ** 8:
            y = 10 ** 8
        elif np.isnan(y):
            y = 10 ** 8
    return y


"""
評価関数
"""


def mae_eval(individual, toolbox, x, y):
    n_features = x.shape[1]
    func = toolbox.compile(expr=individual)
    new_features = [x[:, i] for i in range(n_features)]
    y_predicted = func(*new_features)
    return mean_absolute_error(y, y_predicted),


def mape_eval(individual, toolbox, x, y):
    n_features = x.shape[1]
    func = toolbox.compile(expr=individual)
    new_features = [x[:, i] for i in range(n_features)]
    y_predicted = func(*new_features)
    return np.mean(np.abs((y_predicted - y) / y)) * 100,


def rmse_eval(individual, toolbox, x, y):
    n_features = x.shape[1]
    func = toolbox.compile(expr=individual)
    new_features = [x[:, i] for i in range(n_features)]
    y_predicted = func(*new_features)
    return np.sqrt(mean_squared_error(y, y_predicted)),


def r2_eval(individual, toolbox, x, y):
    n_features = x.shape[1]
    func = toolbox.compile(expr=individual)
    new_features = [x[:, i] for i in range(n_features)]
    y_predicted = func(*new_features)
    return r2_score(y, y_predicted),


def mape_score(true, pred):
    true, pred = true.astype(float), pred.astype(float)
    return np.mean(np.abs((true - pred) / true)) * 100


def rmse_score(true, pred):
    true, pred = true.astype(float), pred.astype(float)
    return np.sqrt(mean_squared_error(true, pred))


def rmspe_score(true, pred):
    true, pred = true.astype(float), pred.astype(float)
    return np.sqrt(np.mean(((pred - true) / true) ** 2)) * 100

"""
GP
"""


def gp_settings():
    layout = [
        [Text("集団数"), InputText(size=(10, 1), key="n")],
        [Text("世代数"), InputText(size=(10, 1), key="g")],
        [Text("交叉確率"), InputText(size=(10, 1), key="pc")],
        [Text("突然変異確率"), InputText(size=(10, 1), key="pm")],
        [Text("木の深さ"), InputText(size=(10, 1), key="depth")],
        [Text("計算のプロセス数"), InputText(size=(10, 1), key="processes")],
        [Submit(), Cancel()]
    ]
    window = Window("GPの設定", layout)
    event, values = window.read()
    window.close()
    n, g = int(values["n"]), int(values["g"])
    pc, pm = float(values["pc"]), float(values["pm"])
    depth, processes = int(values["depth"]), int(values["processes"])

    return n, g, pc, pm, depth, processes


# ノードに使う関数を追加
def select_func_and_variables(dataset):
    func_able = ["add", "sub", "mul", "div", "pow", "ln"]
    eval_list = ["MAE", "MAPE", "RMSE", "R2"]

    layout = [
        [Text("使用する数学関数を選択")],
        [Checkbox("add", key="add", default=True),
         Checkbox("sub", key="sub", default=True),
         Checkbox("mul", key="mul", default=True)],
        [Checkbox("div", key="div", default=True),
         Checkbox("pow", key="pow"), Checkbox("ln", key="ln")],
        [Text("使用する評価関数を選択")],
        [Listbox(eval_list, key="eval_func")],
        [Text("使用する変数 ex. x, y, ....")],
        [Text(dataset.head())],
        [InputText(key="variables")],
        [Submit(), Cancel()]
    ]
    window = Window("select", layout)
    event, values = window.read()
    window.close()

    funclist = []
    for fc in func_able:
        if values[fc]:
            funclist.append(fc)

    eval_func = values["eval_func"]

    p = re.compile("[a-z]+")
    variables = p.findall(values["variables"])

    return funclist, eval_func, variables


def make_toolbox(x_train, y_train, funclist, variables, eval_func,
                 depth):
    """
    x_train, y_train: 訓練データ --> numpy.ndarray
    funclist: ノードに使う関数 --> list
    args: 変数の名称　ex. x, y, z, T　--> string
    eval_func: 評価関数 --> string
    depth: ツリーの深さ --> int (max: 17)
    """

    n_feature = x_train.shape[1]
    pset = gp.PrimitiveSet("MAIN", n_feature)
    # 関数を追加
    primitive = {"add": np.add, "sub": protected_sub, "mul": protected_mul,
                 "div": protected_div, "pow": protected_pow, "ln": protected_ln}
    funcarg = {"add": 2, "sub": 2, "mul": 2, "div": 2, "pow": 2, "ln": 1}
    for func in funclist:
        pset.addPrimitive(primitive[func], funcarg[func], func)
    # 定数を追加
    pset.addEphemeralConstant("rand101", lambda: random.randint(-99, 99))

    jud = len(variables)
    if jud >= 1:
        pset.renameArguments(ARG0=variables[0])
    elif jud >= 2:
        pset.renameArguments(ARG1=variables[1])
    elif jud >= 3:
        pset.renameArguments(ARG2=variables[2])
    elif jud >= 4:
        pset.renameArguments(ARG3=variables[3])
    elif jud >= 5:
        pset.renameArguments(ARG4=variables[4])
    elif jud >= 6:
        pset.renameArguments(ARG5=variables[5])
    elif jud >= 7:
        pset.renameArguments(ARG6=variables[6])
    elif jud >= 8:
        pset.renameArguments(ARG7=variables[7])
    elif jud >= 9:
        pset.renameArguments(ARG8=variables[8])
    elif jud >= 10:
        pset.renameArguments(ARG9=variables[9])

    # 適合度が小さくなるようにするもの、-1は個体の適合度との比較用の値
    creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
    creator.create("Individual", gp.PrimitiveTree, fitness=creator.FitnessMin)

    # toolboxの作成
    toolbox = base.Toolbox()
    toolbox.register("expr", gp.genHalfAndHalf, pset=pset, min_=1, max_=3)
    toolbox.register("individual", tools.initIterate,
                     creator.Individual, toolbox.expr)
    toolbox.register("population", tools.initRepeat,
                     list, toolbox.individual)
    toolbox.register("compile", gp.compile, pset=pset)

    # fitness関数
    if eval_func == "MAPE":
        toolbox.register("evaluate", mape_eval, toolbox=toolbox,
                         x=x_train, y=y_train)
    elif eval_func == "MAE":
        toolbox.register("evaluate", mae_eval, toolbox=toolbox,
                         x=x_train, y=y_train)
    elif eval_func == "RMSE":
        toolbox.register("evaluate", rmse_eval, toolbox=toolbox,
                         x=x_train, y=y_train)
    else:
        toolbox.register("evaluate", r2_eval, toolbox=toolbox,
                         x=x_train, y=y_train)

    toolbox.register("select", tools.selTournament, tournsize=3)
    toolbox.register("mate", gp.cxOnePoint)
    toolbox.register("expr_mut", gp.genFull, min_=0, max_=2)
    toolbox.register("mutate", gp.mutUniform, expr=toolbox.expr_mut, pset=pset)

    # treeの制約、交叉や突然変異で最大深さがdepthになるようにした
    toolbox.decorate("mate", gp.staticLimit(key=operator.attrgetter("height"),
                                            max_value=depth))
    toolbox.decorate("mutate", gp.staticLimit(key=operator.attrgetter("height"),
                                              max_value=depth))
    return toolbox


def main_gp(toolbox, n, pc, pm, g):
    pop = toolbox.population(n=n)
    hof = tools.HallOfFame(1)
    # 結果のlogに表示される統計の値
    stats_fit = tools.Statistics(lambda ind: ind.fitness.values)
    stats_size = tools.Statistics(len)
    mstats = tools.MultiStatistics(fitness=stats_fit, size=stats_size)
    mstats.register("avg", np.mean)
    mstats.register("min", np.min)
    mstats.register("max", np.max)
    # 計算スタート時間
    time1 = time.time()
    # 計算アルゴリズム
    pop, log = algorithms.eaSimple(pop, toolbox, pc, pm, g, stats=mstats,
                                   halloffame=hof, verbose=True)
    # 計算終了時間
    time2 = time.time()
    # 経過時間を表示
    cal_time = time2 - time1

    # logをcsvに記録する用のデータ
    gen_rec = log.select("gen")
    fit_rec = log.chapters["fitness"].select("min")
    size_min = log.chapters["size"].select("min")
    size_max = log.chapters["size"].select("max")
    size_avg = log.chapters["size"].select("avg")
    size_rec = {"min": size_min, "max": size_max, "avg": size_avg}

    # 最も適合度が優秀だったものの式
    expr = tools.selBest(pop, 1)[0]
    s_exp = gp.PrimitiveTree(expr)
    best_fit = expr.fitness.values[0]

    result = {"expr": expr, "s_exp": s_exp, "best_fit": best_fit,
              "gen_rec": gen_rec, "fit_rec": fit_rec, "size_rec": size_rec,
              "cal_time": cal_time}
    return result


"""
S-Expression to Equation
S式で表現されるので、式を計算で使う場合は
一般的な式の形に変換する必要がある
ex) add(x, y) --> (x + y)
"""


def slash_func(tree, variables):
    s_exp = str(tree)
    func1 = ("ln", "exp", "cos", "sin", "log")
    func2 = ("add", "sub", "mul", "div", "pow")
    mark = ("(", ",", ")")
    check = func1 + func2 + variables
    for c in check:
        s_exp = s_exp.replace(c, c + "/")
    for c in mark:
        s_exp = s_exp.replace(c, "/" + c + "/")
    s_exp = s_exp.replace(" ", "")
    s_exp = s_exp.replace("//", "/").split("/")
    s_exp.pop(-1)
    return s_exp


def isfloat(parameter):
    if not parameter.isdecimal():
        try:
            float(parameter)
            return True
        except ValueError:
            return False
    else:
        return False


def cal_complex(s_exp_list, variables):
    count_add = s_exp_list.count("add")
    count_sub = s_exp_list.count("sub")
    count_div = s_exp_list.count("div")
    count_mul = s_exp_list.count("mul")
    count_pow = s_exp_list.count("pow")

    count_vari = 0
    for i in variables:
        count_vari += s_exp_list.count(i)

    const_list = []
    for i in s_exp_list:
        if isfloat(i):
            const_list.append(i)
    count_const = len(const_list)
    complexity = count_const + count_vari + count_add + count_sub + count_mul + 2*count_div + 4*count_pow
    return complexity


def slash_num(tree):
    digit = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')
    check = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '/')
    tree_slash = tree
    for j in range(len(tree)):
        count = len(tree_slash) - 1
        for i in range(count):
            if i+1 > count:
                break
            if tree_slash[i] in digit and tree_slash[i + 1] not in check:
                tree_slash = tree_slash[:i + 1] + "/" + tree_slash[i + 1:]
                break
            if i+2 > count:
                break
            if tree_slash[i] in digit and tree_slash[i + 1] in digit \
                    and tree_slash[i + 2] not in check:
                tree_slash = tree_slash[:i + 2] + "/" + tree_slash[i + 2:]
                break
    return tree_slash


def make_equation(s_exp):
    eq = s_exp
    count_loop = eq.count(")")
    for N in range(count_loop + 1):
        if ")" not in eq:
            break
        # switch: ループを抜け次のループに行くための指針
        switch = 0
        # i は最初に")"がある位置を取得
        i = eq.index(")")
        # 初めは引数が一つの数学的関数
        func1 = ("ln", "exp", "cos", "sin", "log")
        for j in func1:
            if eq[i - 3] == j:
                word = "(" + j + "(" + eq[i - 1] + ")" + ")"
                eq[i - 3] = word
                del eq[i - 2:i + 1]
                switch += 1
                break
        if switch == 1:
            continue
        # 次は引数が二つの数学的関数
        func2 = ("add", "sub", "mul", "div", "pow")
        for k in func2:
            if eq[i - 5] == k:
                if k == "add":
                    word = "(" + eq[i - 3] + " + " + eq[i - 1] + ")"
                    eq[i - 5] = word
                    del eq[i - 4:i + 1]
                    break
                elif k == "sub":
                    word = "(" + eq[i - 3] + " - " + eq[i - 1] + ")"
                    eq[i - 5] = word
                    del eq[i - 4:i + 1]
                    break
                elif k == "mul":
                    word = "(" + eq[i - 3] + " * " + eq[i - 1] + ")"
                    eq[i - 5] = word
                    del eq[i - 4:i + 1]
                    break
                elif k == "div":
                    word = "(" + eq[i - 3] + " / " + eq[i - 1] + ")"
                    eq[i - 5] = word
                    del eq[i - 4:i + 1]
                    break
                else:
                    word = "(" + eq[i - 3] + "**(" + eq[i - 1] + ")" + ")"
                    eq[i - 5] = word
                    del eq[i - 4:i + 1]
                    break
    return eq


def simple_equation(eq, variables):
    for i in range(len(variables)):
        globals()[variables[i]] = sympy.symbols(variables[i])
    sympy.init_printing(use_unicode=True)
    simple_eq = sympy.simplify(eq)
    return simple_eq


def subs_to_eq(eq, variables, x):
    loop = len(variables)
    for i in range(loop):
        globals()[variables[i]] = sympy.symbols(variables[i])
    sympy.init_printing(use_unicode=True)
    expr = eq
    n_data = x.shape[0]
    n_feat = x.shape[1]
    sub_list = []
    for i in range(n_data):
        semi_list = []
        for j in range(n_feat):
            t = (variables[j], x[i][j])
            semi_list.append(t)
        sub_list.append(semi_list)
    y = [float(expr.subs(sub_list[i])) for i in range(n_data)]
    return y


def s_to_eq(s_exp, variables):
    # s_exp: GPで計算されるS式
    # variables: 変数を文字型で書く　ex.
    eq = slash_func(s_exp, variables)
    eq = slash_num(eq)
    eq.split("/")
    eq.pop(-1)
    eq = make_equation(eq)
    simple_eq = simple_equation(eq[0], variables)
    return simple_eq


"""
ファイル関係
"""


def load_file():
    layout = [
        [Text("ファイル"), InputText(), FileBrowse(key="file")],
        [Submit(), Cancel()],
    ]
    window = Window("CSVファイル選択", layout)
    event, values = window.read()
    window.close()
    file = values["file"]
    return file


def get_folder():
    layout = [
        [Text("csv"), InputText(), FolderBrowse(key="csv")],
        [Text("png"), InputText(), FolderBrowse(key="png")],
        [Submit(), Cancel()]
    ]
    window = Window("データ保存用フォルダーの選択", layout)
    event, values = window.read()
    window.close()
    return values["csv"], values["png"]


def split_feat_and_target(csv_file):
    dataset = pd.read_csv(csv_file, index_col=0)
    layout = [
        [Text("データセットの頭部分")],
        [Text(dataset.head())],
        [Text("特徴量の列")],
        [Text("start"), InputText(size=(3, 1), key="feat_start")],
        [Text("end"), InputText(size=(3, 1), key="feat_end")],
        [Text("ターゲットの列"), InputText(size=(3, 1), key="target")],
        [Submit(), Cancel()]
    ]
    window = Window("特徴量とターゲットに分割", layout)
    event, values = window.read()
    window.close()
    feat = dataset.iloc[:,
           int(values["feat_start"]): int(values["feat_end"]) + 1]
    target = dataset.iloc[:, int(values["target"])]

    return dataset, feat, target


def record_csv(folder_path, n, g, depth, pc, pm, cal_time, s_exp, eq, best_fit,
               gen_rec, fit_rec, size_rec, num_rec):
    today = datetime.date.today()

    file_name = folder_path + "/{}_{}.csv".format(today, num_rec)
    with open(file_name, "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Population", "Generation", "Depth", "Pc", "Pm"])
        writer.writerow([n, g, depth, pc, pm])
        writer.writerow(["Date", str(today)])
        writer.writerow(["time", cal_time])
        writer.writerow(["S_Expression", str(s_exp)])
        writer.writerow(["Best_tree_equation", str(eq)])
        writer.writerow(["Best_Fit", best_fit])
        writer.writerow([""])
        writer.writerow(["gen", "fit_min", "size_avg", "size_min", "size_max"])
        for i in range(len(gen_rec)):
            writer.writerow(
                [gen_rec[i], fit_rec[i], size_rec["avg"][i],
                 size_rec["min"][i], size_rec["max"][i]]
            )


def record_excel(folder_path, n, g, depth, pc, pm, cal_time, s_exp, eq, sim_eq,
                 best_fit, gen_rec, fit_rec, size_rec, num_rec, x_train,
                 y_train, x_test, y_test, variables, eval_method, complexity):
    today = datetime.date.today()
    file_name = folder_path + "/{}_{}.xlsx".format(today, num_rec)
    df0 = pd.DataFrame(
        [str(today), n, g, depth, pc, pm, cal_time, eval_method,
         str(s_exp), str(eq), str(sim_eq),best_fit, complexity],
        index=["Date", "Population", "Generation", "Depth", "Pc", "Pm",
               "Cal_Time", "Eval_method","S_Expression", "Simple Equation", "Equation",
               "Best_Fit", "Complexity"]
    )
    df1 = pd.DataFrame(
        [[gen_rec[i], fit_rec[i], size_rec["avg"][i],
          size_rec["min"][i], size_rec["max"][i]] for i in range(len(gen_rec))],
        columns=["gen", "fit_min", "size_avg", "size_min", "size_max"]
    )
    # 訓練データ
    y_train_predict = np.array(subs_to_eq(eq, variables, x_train))
    df2_data = np.transpose(x_train.transpose().tolist() + [y_train.tolist()]
                            + [y_train_predict])
    df2_columns = variables + ("y_train", "y_predicted")
    df2 = pd.DataFrame(df2_data, columns=df2_columns)
    mae_train = mean_absolute_error(y_true=y_train, y_pred=y_train_predict)
    mape_train = mape_score(y_train, y_train_predict)
    rmse_train = rmse_score(y_train, y_train_predict)
    rmspe_train = rmspe_score(y_train, y_train_predict)
    r2_train = r2_score(y_train, y_train_predict)
    df3 = pd.DataFrame(
        [[mae_train], [mape_train], [rmse_train], [rmspe_train], [r2_train]],
        index=["MAE", "MAPE", "RMSE", "RMSPE", "R2"]
    )
    # test データ
    y_test_predict = np.array(subs_to_eq(eq, variables, x_test))
    df4_data = np.transpose(x_test.transpose().tolist() + [y_test.tolist()]
                            + [y_test_predict])
    df4_columns = variables + ("y_test", "y_predicted")
    df4 = pd.DataFrame(df4_data, columns=df4_columns)
    mae_test = mean_absolute_error(y_test, y_test_predict)
    mape_test = mape_score(y_test, y_test_predict)
    rmse_test = rmse_score(y_test, y_test_predict)
    rmspe_test = rmspe_score(y_test, y_test_predict)
    r2_test = r2_score(y_test, y_test_predict)
    df5 = pd.DataFrame(
        [[mae_test], [mape_test], [rmse_test], [rmspe_test], [r2_test]],
        index=["MAE", "MAPE", "RMSE", "RMSPE", "R2"]
    )

    with pd.ExcelWriter(file_name) as writer:
        df0.to_excel(writer, sheet_name="gp settings")
        df1.to_excel(writer, sheet_name="logbook")
        df2.to_excel(writer, sheet_name="train_data")
        df3.to_excel(writer, sheet_name="train_eval")
        df4.to_excel(writer, sheet_name="test_data")
        df5.to_excel(writer, sheet_name="test_eval")


def record_pdf(expr, folder_path, num_rec):
    today = datetime.date.today()
    nodes, edges, labels = gp.graph(expr)

    tree_figure = nx.Graph()
    tree_figure.add_nodes_from(nodes)
    tree_figure.add_edges_from(edges)
    pos = nx.drawing.nx_pydot.graphviz_layout(tree_figure, prog="dot")

    fig = plt.figure(figsize=(40, 20))
    nx.draw_networkx_nodes(tree_figure, pos, node_color="skyblue",
                           node_size=1500)
    nx.draw_networkx_edges(tree_figure, pos)
    nx.draw_networkx_labels(tree_figure, pos, labels, font_size=20)
    file_name = folder_path + "/setozoku_{}.pdf".format(num_rec)
    pp = PdfPages(file_name)
    pp.savefig()
    pp.close()
    plt.close(fig)
